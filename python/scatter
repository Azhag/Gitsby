#!/usr/bin/env python

# Allow output without display
from matplotlib import use
use('Agg')

from matplotlib import pyplot
from matplotlib import cm 
import scipy
from scipy.stats.kde import gaussian_kde
import numpy as np
from sys import stdin
from optparse import OptionParser
from re import split
import warnings
warnings.filterwarnings('ignore', category=DeprecationWarning)

parser = OptionParser()
parser.add_option('-o', '--output',
    dest='output', action='store', type='string', default='/tmp/plot.png',
    help='PDF file name where result is saved')

parser.add_option('-x', '--xaxis',
    dest='xlabel', action='store', type='string', default=None,
    help='x axis label')

parser.add_option('-f', '--fir',
    dest='linear_fit', action='store_true',
    help='fit a regression line')                                

parser.add_option('-l', '--xlim',
    dest='xlim', action='store', type='string', default=None,
    help='limits of x axis')

parser.add_option('--ylim',
    dest='ylim', action='store', type='string', default=None,
    help='limits of y axis')

parser.add_option('-y', '--yaxis',
    dest='ylabel', action='store', type='string', default=None,
    help='y axis label')

parser.add_option('-t', '--title',
    dest='title', action='store', type='string', default=None,
    help='graph title')

parser.add_option('--heat',
    dest='heat', action='store_true', default=False,
    help='do a heat map')

options, args = parser.parse_args()

first = False
methods = None
mode = None
for line in stdin.readlines():
  cols = split(r'\s+', line.strip())
  if mode == None:
    if len(cols) == 3:
      mode = 'collated'
      methods = dict()

    elif len(cols) == 2:
      mode = '2cols'
      methods = ([], [])

    else:
      assert False

  if mode == 'collated':
    assert len(cols) == 3
    if not cols[0] in methods:
      methods[cols[0]] = ([], []) 

    methods[cols[0]][0].append(float(cols[1]))
    methods[cols[0]][1].append(float(cols[2]))

  elif mode == '2cols':
    assert len(cols) == 2
    methods[0].append(float(cols[0]))
    methods[1].append(float(cols[1]))

mid = 0
colours = ['b', 'r', 'k', 'y']
ticks = ['.', '.', '^', 'v', 'x', '.']

figure = pyplot.figure()
axis = pyplot.subplot(1, 1, 1)

xlimits = False
ylimits = False

if options.xlim is not None:
  lim = split(r',', options.xlim.strip())
  min_x = float(lim[0])
  max_x = float(lim[1])
  xlimits = True

elif mode == '2cols':
  min_x = min(methods[0])
  max_x = max(methods[0])
  xlimits = True

if options.ylim is not None:
  lim = split(r',', options.ylim.strip())
  min_y = float(lim[0])
  max_y = float(lim[1])
  ylimits = True

elif mode == '2cols':
  min_y = min(methods[1])
  max_y = max(methods[1])
  ylimits = True

if mode == 'collated':
  legend = list()
  for method in methods:
    pyplot.plot(methods[method][0], methods[method][1], colours[mid] + ticks[mid], alpha=0.4)
    legend.append(method)
    mid += 1     

  pyplot.legend(legend, loc=4)

elif mode == '2cols':
  pyplot.plot(methods[0], methods[1], 'b.', alpha=0.8)
  if options.heat:
    kde = scipy.stats.kde.gaussian_kde(np.array([methods[0], methods[1]]))

    width=100
    dx = float(max_x-min_x)/float(width)
    dy = float(max_y-min_y)/float(width)
    x_grid = np.arange(min_x, (max_x+dx), dx)
    y_grid = np.arange(min_y, (max_y+dy), dy)
    (x,y) = np.meshgrid(x_grid, y_grid)
    z = kde(np.array(zip(x.flatten(), y.flatten())).T)
    pyplot.contour(x_grid, y_grid, z.reshape(y_grid.shape[0], x_grid.shape[0]))


if options.linear_fit:
  (ar, br) = scipy.polyfit(methods[0], methods[1],1)
  xr = [min_x, max_x]
  yr = scipy.polyval([ar, br], xr)
  pyplot.plot(xr, yr, 'b--')

if options.title is not None:
  pyplot.title(options.title) 

if options.xlabel is not None:
  pyplot.xlabel(options.xlabel)

if options.ylabel is not None:
  pyplot.ylabel(options.ylabel)

if xlimits:
  pyplot.xlim(min_x, max_x)

if ylimits:
  pyplot.ylim(min_y, max_y)

pyplot.savefig(options.output)
